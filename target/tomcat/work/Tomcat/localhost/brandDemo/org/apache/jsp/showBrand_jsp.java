/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2023-06-24 13:56:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class showBrand_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>大全</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        .el-table .warning-row {\r\n");
      out.write("            background: oldlace;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .el-table .message-row {\r\n");
      out.write("            background: #f5f2f2;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .el-table .success-row {\r\n");
      out.write("            background: #f0f9eb;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"overview\">\r\n");
      out.write("    <el-form :inline=\"true\" :model=\"formInline\" class=\"formInline\" ref=\"formInline\">\r\n");
      out.write("        <el-form-item>\r\n");
      out.write("            <template>\r\n");
      out.write("                <el-avatar>董</el-avatar>\r\n");
      out.write("            </template>\r\n");
      out.write("            <el-divider direction=\"vertical\"></el-divider>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("\r\n");
      out.write("        <el-form-item label=\"当前状态\">\r\n");
      out.write("            <el-select v-model=\"formInline.status\" prop=\"status\" placeholder=\"请选择状态\">\r\n");
      out.write("                <el-option label=\"启用\" value=\"1\"></el-option>\r\n");
      out.write("                <el-option label=\"禁用\" value=\"0\"></el-option>\r\n");
      out.write("            </el-select>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("        <el-form-item label=\"品牌名称\" prop=\"brandName\">\r\n");
      out.write("            <el-input v-model=\"formInline.brandName\" placeholder=\"请输入关键词\"></el-input>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("        <el-form-item label=\"企业名称\" prop=\"companyName\">\r\n");
      out.write("            <el-input v-model=\"formInline.companyName\" placeholder=\"请输入关键词\"></el-input>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("        <el-form-item>\r\n");
      out.write("            <el-button type=\"primary\" @click=\"onSubmit()\" icon=\"el-icon-search\"></el-button>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("        <el-form-item>\r\n");
      out.write("            <el-button type=\"primary\" @click=\"resetForm('formInline')\" icon=\"el-icon-help\">重置</el-button>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("        <el-form-item>\r\n");
      out.write("            <el-button @click=\"reSearch()\" v-if=\"flag==='1'\" type=\"warning\" plain>← 返回</el-button>\r\n");
      out.write("        </el-form-item>\r\n");
      out.write("    </el-form>\r\n");
      out.write("    <!--    新增的表单格式为  brandName companyName  ordered description status-->\r\n");
      out.write("    <el-button type=\"primary\" @click=\"dialogVisible = true\"><i class=\"el-icon-plus\"></i>新增品牌</el-button>\r\n");
      out.write("    <el-dialog :visible.sync=\"dialogVisible\" @close=\"resetForm('ruleForm')\">\r\n");
      out.write("        <el-form title=\"新增品牌\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\"\r\n");
      out.write("                 :model=\"ruleForm\">\r\n");
      out.write("            <el-form-item label=\"品牌名称\" prop=\"brandName\">\r\n");
      out.write("                <el-input v-model=\"ruleForm.brandName\" autocomplete=\"off\"></el-input>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("            <el-form-item label=\"企业名称\" prop=\"companyName\">\r\n");
      out.write("                <el-input v-model=\"ruleForm.companyName\"></el-input>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("            <el-form-item label=\"销量\" prop=\"ordered\">\r\n");
      out.write("                <el-input v-model=\"ruleForm.ordered\" autocomplete=\"off\"></el-input>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("            <el-form-item label=\"描述\" prop=\"description\">\r\n");
      out.write("                <el-input v-model=\"ruleForm.description\" autocomplete=\"off\"></el-input>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("            <el-form-item label=\"状态\" prop=\"status\">\r\n");
      out.write("                <el-switch v-model=\"ruleForm.status\"\r\n");
      out.write("                           active-color=\"#13ce66\"\r\n");
      out.write("                           inactive-color=\"grey\"\r\n");
      out.write("                           active-value=\"1\"\r\n");
      out.write("                           inactive-value=\"0\"\r\n");
      out.write("                >\r\n");
      out.write("                </el-switch>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("            <el-form-item>\r\n");
      out.write("                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">立即创建</el-button>\r\n");
      out.write("                <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n");
      out.write("            </el-form-item>\r\n");
      out.write("        </el-form>\r\n");
      out.write("    </el-dialog>\r\n");
      out.write("    <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"deleteData()\">删除选中</el-button>\r\n");
      out.write("    <el-button type=\"info\" @click=\"toggleSelection()\"><i class=\"el-icon-plus\"></i>取消选择</el-button>\r\n");
      out.write("    <el-divider><i class=\"el-icon-apple\"></i></el-divider>\r\n");
      out.write("    <!--    表单  -->\r\n");
      out.write("    <template>\r\n");
      out.write("        <el-table\r\n");
      out.write("                ref=\"multipleTable\"\r\n");
      out.write("                :data=\"tableData\"\r\n");
      out.write("                style=\"width: 100%\"\r\n");
      out.write("                :row-class-name=\"tableRowClassName\"\r\n");
      out.write("                @selection-change=\"handleSelectionChange\">\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    type=\"selection\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    label=\"序号\"\r\n");
      out.write("                    type=\"index\"\r\n");
      out.write("                    prop=\"index\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"brandName\"\r\n");
      out.write("                    label=\"品牌名称\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"companyName\"\r\n");
      out.write("                    label=\"企业名称\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"ordered\"\r\n");
      out.write("                    label=\"销量\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"description\"\r\n");
      out.write("                    label=\"描述\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"status\"\r\n");
      out.write("                    label=\"当前状态\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("            >\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("            <el-table-column\r\n");
      out.write("                    prop=\"operation\"\r\n");
      out.write("                    align=\"center\"\r\n");
      out.write("                    label=\"操作\">\r\n");
      out.write("                <template slot-scope=\"scope\">\r\n");
      out.write("                    <el-button type=\"primary\" plain @click=\"edit()\"><i class=\"el-icon-edit\"></i></el-button>\r\n");
      out.write("                    <el-button type=\"danger\" plain @click=\"deleteById(scope.$index, scope.row)\"><i\r\n");
      out.write("                            class=\"el-icon-delete\"></i></el-button>\r\n");
      out.write("                </template>\r\n");
      out.write("            </el-table-column>\r\n");
      out.write("        </el-table>\r\n");
      out.write("    </template>\r\n");
      out.write("    <br>\r\n");
      out.write("    <!--    分页      -->\r\n");
      out.write("    <div class=\"block\">\r\n");
      out.write("        <span class=\"demonstration\"></span>\r\n");
      out.write("        <el-pagination\r\n");
      out.write("                @size-change=\"handleSizeChange\"\r\n");
      out.write("                @current-change=\"handleCurrentChange\"\r\n");
      out.write("                :current-page=\"currentPage\"\r\n");
      out.write("                :page-sizes=\"[2, 5, 10, 15]\"\r\n");
      out.write("                :page-size=\"pageSize\"\r\n");
      out.write("                layout=\"total, sizes, prev, pager, next, jumper\"\r\n");
      out.write("                :total=\"totalCount\"\r\n");
      out.write("                background\r\n");
      out.write("                layout=\"prev, pager, next\">\r\n");
      out.write("        </el-pagination>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"js/vue.js\"></script>\r\n");
      out.write("<script src=\"js/axios-0.18.0.js\"></script>\r\n");
      out.write("<script src=\"element-ui/lib/index.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"element-ui/lib/theme-chalk/index.css\">\r\n");
      out.write("<script>\r\n");
      out.write("    new Vue({\r\n");
      out.write("        el: \"#overview\",\r\n");
      out.write("        data() {\r\n");
      out.write("            return {\r\n");
      out.write("                flag: \"0\",\r\n");
      out.write("                formInline: {\r\n");
      out.write("                    status: '',\r\n");
      out.write("                    companyName: '',\r\n");
      out.write("                    brandName: ''\r\n");
      out.write("                },\r\n");
      out.write("                pageSize: 5,\r\n");
      out.write("                totalCount: 100,\r\n");
      out.write("                currentPage: 1,\r\n");
      out.write("                multipleSelection: [],\r\n");
      out.write("                dialogVisible: false,\r\n");
      out.write("                ruleForm: {\r\n");
      out.write("                    id: \"\",\r\n");
      out.write("                    brandName: '',\r\n");
      out.write("                    companyName: '',\r\n");
      out.write("                    ordered: '',\r\n");
      out.write("                    status: '',\r\n");
      out.write("                    description: '',\r\n");
      out.write("                },\r\n");
      out.write("                rules: {\r\n");
      out.write("                    brandName: [{required: true, message: '请输入品牌名称', trigger: 'blur'},],\r\n");
      out.write("                    companyName: [{required: true, message: '请输入企业名称', trigger: 'blur'},],\r\n");
      out.write("                    ordered: [{required: true, message: '请输入销量(0-100之间的整数)', trigger: 'blur'}],\r\n");
      out.write("                },\r\n");
      out.write("                formLabelWidth: '120px',\r\n");
      out.write("                tableData: [],\r\n");
      out.write("                wantDeleteIds: [],\r\n");
      out.write("                multipleTable: [],\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        mounted() {\r\n");
      out.write("            this.selectAll();\r\n");
      out.write("        },\r\n");
      out.write("        methods: {\r\n");
      out.write("            edit() {\r\n");
      out.write("                this.$message({\r\n");
      out.write("                    message: '此功能暂未开发~',\r\n");
      out.write("                    type: 'warning'\r\n");
      out.write("                });\r\n");
      out.write("            },\r\n");
      out.write("            reSearch() {\r\n");
      out.write("                this.currentPage = 1\r\n");
      out.write("                this.selectAll();\r\n");
      out.write("                this.flag = \"0\"\r\n");
      out.write("            },\r\n");
      out.write("            //分页\r\n");
      out.write("            handleSizeChange(val) {\r\n");
      out.write("                // 重新设置每页显示的条数\r\n");
      out.write("                this.pageSize = val;\r\n");
      out.write("\r\n");
      out.write("            },\r\n");
      out.write("            handleCurrentChange(val) {\r\n");
      out.write("                // 重新设置当前页码\r\n");
      out.write("                this.currentPage = val;\r\n");
      out.write("                if (this.flag === \"0\") {\r\n");
      out.write("                    this.selectAll();\r\n");
      out.write("                } else this.onSubmit();\r\n");
      out.write("            },\r\n");
      out.write("            deleteById(index, row) {\r\n");
      out.write("                console.log(row.id);\r\n");
      out.write("                this.$confirm('此操作将删除本行数据, 是否继续?', '提示', {\r\n");
      out.write("                    confirmButtonText: '确定',\r\n");
      out.write("                    cancelButtonText: '取消',\r\n");
      out.write("                    type: 'warning'\r\n");
      out.write("                }).then(() => {\r\n");
      out.write("                    let _this = this;\r\n");
      out.write("                    axios({\r\n");
      out.write("                        method: \"post\",\r\n");
      out.write("                        url: \"http://localhost:8080/brandDemo/brand/deleteById\",\r\n");
      out.write("                        data: row.id\r\n");
      out.write("                    }).then(function (resp) {\r\n");
      out.write("                        if (resp.data.toString() === \"success\") {\r\n");
      out.write("                            _this.$message({\r\n");
      out.write("                                message: '本行删除成功~',\r\n");
      out.write("                                type: 'success'\r\n");
      out.write("                            });\r\n");
      out.write("                            _this.selectAll();\r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                }).catch(() => {\r\n");
      out.write("                    //用户点击取消按钮\r\n");
      out.write("                    this.$message({\r\n");
      out.write("                        type: 'info',\r\n");
      out.write("                        message: '已取消删除'\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("            },\r\n");
      out.write("            deleteData() {\r\n");
      out.write("                this.$confirm('此操作将删除选中数据, 是否继续?', '提示', {\r\n");
      out.write("                    confirmButtonText: '确定',\r\n");
      out.write("                    cancelButtonText: '取消',\r\n");
      out.write("                    type: 'warning'\r\n");
      out.write("                }).then(() => {\r\n");
      out.write("                    let _this = this;\r\n");
      out.write("                    for (let i = 0; i < this.multipleSelection.length; i++) {\r\n");
      out.write("                        this.wantDeleteIds[i] = this.multipleSelection[i].id;\r\n");
      out.write("                    }\r\n");
      out.write("                    axios({\r\n");
      out.write("                        method: \"post\",\r\n");
      out.write("                        url: \"http://localhost:8080/brandDemo/brand/deleteByIds\",\r\n");
      out.write("                        data: this.wantDeleteIds\r\n");
      out.write("                    }).then(function (resp) {\r\n");
      out.write("                        if (resp.data.toString() === \"success\") {\r\n");
      out.write("                            _this.$message({\r\n");
      out.write("                                message: '删除成功~',\r\n");
      out.write("                                type: 'success'\r\n");
      out.write("                            });\r\n");
      out.write("                            _this.selectAll();\r\n");
      out.write("                        }\r\n");
      out.write("                    })\r\n");
      out.write("                }).catch(() => {\r\n");
      out.write("                    //用户点击取消按钮\r\n");
      out.write("                    this.$message({\r\n");
      out.write("                        type: 'info',\r\n");
      out.write("                        message: '已取消删除'\r\n");
      out.write("                    });\r\n");
      out.write("                });\r\n");
      out.write("            },\r\n");
      out.write("            selectAll() {\r\n");
      out.write("                axios({\r\n");
      out.write("                    method: \"post\",\r\n");
      out.write("                    url: \"http://localhost:8080/brandDemo/brand/selectByPage?currentPage=\" + this.currentPage + \"&pageSize=\" + this.pageSize,\r\n");
      out.write("                    data: this.tableData\r\n");
      out.write("                }).then(resp => {\r\n");
      out.write("                    this.tableData = resp.data.rows;\r\n");
      out.write("                    //设置总记录数\r\n");
      out.write("                    this.totalCount = resp.data.totalCount;\r\n");
      out.write("                    //使用statusStr  ??\r\n");
      out.write("                    for (let i = 0; i < this.tableData.length; ++i) {\r\n");
      out.write("                        if (this.tableData[i].status === 1) {\r\n");
      out.write("                            this.tableData[i].status = \"启用\";\r\n");
      out.write("                        } else this.tableData[i].status = \"禁用\";\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("            },\r\n");
      out.write("            resetForm(formName) {\r\n");
      out.write("                this.$refs[formName].resetFields();\r\n");
      out.write("            },\r\n");
      out.write("            handleClose(done) {\r\n");
      out.write("                this.$confirm('确认取消添加？')\r\n");
      out.write("                        .then(_ => {\r\n");
      out.write("                            done();\r\n");
      out.write("                        })\r\n");
      out.write("                        .catch(_ => {\r\n");
      out.write("                        });\r\n");
      out.write("            },\r\n");
      out.write("            submitForm(formName) {\r\n");
      out.write("                this.$refs[formName].validate((valid) => {\r\n");
      out.write("                    if (valid) {\r\n");
      out.write("                        console.log(this.ruleForm);\r\n");
      out.write("                        //提交数据\r\n");
      out.write("                        let _this = this;\r\n");
      out.write("                        axios({\r\n");
      out.write("                            method: \"POST\",\r\n");
      out.write("                            url: \"http://localhost:8080/brandDemo/brand/add\",\r\n");
      out.write("                            data: _this.ruleForm\r\n");
      out.write("                        }).then(function (resp) {\r\n");
      out.write("                            if (resp.data.toString() === \"success\") {\r\n");
      out.write("                                _this.dialogVisible = false;\r\n");
      out.write("                                _this.$message({\r\n");
      out.write("                                    message: '添加成功~',\r\n");
      out.write("                                    type: 'success'\r\n");
      out.write("                                });\r\n");
      out.write("                                _this.selectAll();\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    } else {\r\n");
      out.write("                        console.log('error submit!!');\r\n");
      out.write("                        return false;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            },\r\n");
      out.write("            tableRowClassName({rowIndex}) {\r\n");
      out.write("                if (rowIndex % 3 === 0) {\r\n");
      out.write("                    return 'warning-row';\r\n");
      out.write("                } else if (rowIndex % 3 === 1) {\r\n");
      out.write("                    return 'success-row';\r\n");
      out.write("                }\r\n");
      out.write("                return 'message-row';\r\n");
      out.write("            },\r\n");
      out.write("            toggleSelection(rows) {\r\n");
      out.write("                if (rows) {\r\n");
      out.write("                    rows.forEach(row => {\r\n");
      out.write("                        this.$refs.multipleTable.toggleRowSelection(row);\r\n");
      out.write("                    });\r\n");
      out.write("                } else {\r\n");
      out.write("                    this.$refs.multipleTable.clearSelection();\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            handleSelectionChange(val) {\r\n");
      out.write("                this.multipleSelection = val;\r\n");
      out.write("            },\r\n");
      out.write("            onSubmit() {//页面上方的按条件检索\r\n");
      out.write("                console.log(this.formInline);\r\n");
      out.write("                let _this = this;\r\n");
      out.write("                axios({\r\n");
      out.write("                    method: \"post\",\r\n");
      out.write("                    url: \"http://localhost:8080/brandDemo/brand/selectByPageAndCondition?currentPage=\" + this.currentPage + \"&pageSize=\" + this.pageSize,\r\n");
      out.write("                    data: this.formInline\r\n");
      out.write("                }).then(function (resp) {\r\n");
      out.write("                    _this.tableData = resp.data.rows;\r\n");
      out.write("                    console.log(_this.tableData)\r\n");
      out.write("                    //设置总记录数\r\n");
      out.write("                    _this.totalCount = resp.data.totalCount;\r\n");
      out.write("                    //使用statusStr  ??\r\n");
      out.write("                    for (let i = 0; i < _this.tableData.length; ++i) {\r\n");
      out.write("                        if (_this.tableData[i].status === 1) {\r\n");
      out.write("                            _this.tableData[i].status = \"启用\";\r\n");
      out.write("                        } else _this.tableData[i].status = \"禁用\";\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("                this.flag = \"1\";\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    })\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
